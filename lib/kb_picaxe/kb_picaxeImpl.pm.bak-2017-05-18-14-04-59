package kb_picaxe::kb_picaxeImpl;
use strict;
use Bio::KBase::Exceptions;
# Use Semantic Versioning (2.0.0-rc.1)
# http://semver.org
our $VERSION = '0.0.1';
our $GIT_URL = '';
our $GIT_COMMIT_HASH = '';

=head1 NAME

kb_picaxe

=head1 DESCRIPTION

A KBase module: kb_picaxe
This method wraps the PicAxe tool.

=cut

#BEGIN_HEADER
use Bio::KBase::AuthToken;
use Bio::KBase::workspace::Client;
use Config::IniFiles;
use Data::Dumper;
use fba_tools::fba_toolsClient;
#END_HEADER

sub new
{
    my($class, @args) = @_;
    my $self = {
    };
    bless $self, $class;
    #BEGIN_CONSTRUCTOR

    my $config_file = $ENV{ KB_DEPLOYMENT_CONFIG };
    my $cfg = Config::IniFiles->new(-file=>$config_file);
    my $wsInstance = $cfg->val('kb_picaxe','workspace-url');
    die "no workspace-url defined" unless $wsInstance;

    $self->{'workspace-url'} = $wsInstance;

    print "Instantiating fba_tools\n";

    $self->{'callbackURL'} = $ENV{'SDK_CALLBACK_URL'};

    #END_CONSTRUCTOR

    if ($self->can('_init_instance'))
    {
	$self->_init_instance();
    }
    return $self;
}

=head1 METHODS



=head2 runpicaxe

  $return = $obj->runpicaxe($params)

=over 4

=item Parameter and return types

=begin html

<pre>
$params is a kb_picaxe.RunPicAxe
$return is a kb_picaxe.PicAxeResults
RunPicAxe is a reference to a hash where the following keys are defined:
	workspace has a value which is a kb_picaxe.workspace_name
	model_id has a value which is a kb_picaxe.model_id
	compounds has a value which is a reference to a list where each element is a kb_picaxe.EachCompound
workspace_name is a string
model_id is a string
EachCompound is a reference to a hash where the following keys are defined:
	compound_id has a value which is a string
	compound_name has a value which is a string
PicAxeResults is a reference to a hash where the following keys are defined:
	model_id has a value which is a kb_picaxe.model_id

</pre>

=end html

=begin text

$params is a kb_picaxe.RunPicAxe
$return is a kb_picaxe.PicAxeResults
RunPicAxe is a reference to a hash where the following keys are defined:
	workspace has a value which is a kb_picaxe.workspace_name
	model_id has a value which is a kb_picaxe.model_id
	compounds has a value which is a reference to a list where each element is a kb_picaxe.EachCompound
workspace_name is a string
model_id is a string
EachCompound is a reference to a hash where the following keys are defined:
	compound_id has a value which is a string
	compound_name has a value which is a string
PicAxeResults is a reference to a hash where the following keys are defined:
	model_id has a value which is a kb_picaxe.model_id


=end text



=item Description



=back

=cut

sub runpicaxe
{
    my $self = shift;
    my($params) = @_;

    my @_bad_arguments;
    (ref($params) eq 'HASH') or push(@_bad_arguments, "Invalid type for argument \"params\" (value was \"$params\")");
    if (@_bad_arguments) {
	my $msg = "Invalid arguments passed to runpicaxe:\n" . join("", map { "\t$_\n" } @_bad_arguments);
	Bio::KBase::Exceptions::ArgumentValidationError->throw(error => $msg,
							       method_name => 'runpicaxe');
    }

    my $ctx = $kb_picaxe::kb_picaxeServer::CallContext;
    my($return);
    #BEGIN runpicaxe



    my $fbaO = new fba_tools::fba_toolsClient( $self->{'callbackURL'},
                                                            ( 'service_version' => 'dev',
                                                              'async_version' => 'dev',
                                                            )
                                                          );
    my $tmpDir = "/kb/module/work/tmp";
    my $rdDir = "/kb/module/work/tmp/Reads";




    print "\n\nrunning setup\n\n";
    #system ('python3 /kb/module/lib/kb_picaxe/setup.py install');
    #system ('cp /kb/module/lib/kb_picaxe/minedatabase mine/database');
    #system ("cd ../lib/kb_picaxe");
    system ('pwd');
    my @cmd = ("python3", "/kb/dev_container/modules/PicAxe/MINE-Database/minedatabase/pickaxe.py", "-h");

    system (@cmd);

    #system ('python3 /kb/module/lib/kb_picaxe/minedatabase/pickaxe.py -h');
    system ('python3 /kb/dev_container/modules/PicAxe/MINE-Database/minedatabase/pickaxe.py -C /kb/dev_container/modules/PicAxe/MINE-Database/minedatabase/data/ChemicalDamageCoreactants.tsv -r /kb/dev_container/modules/PicAxe/MINE-Database/minedatabase/data/ChemicalDamageReactionRules.tsv -g 1 -c /kb/dev_container/modules/PicAxe/MINE-Database/minedatabase/data/iAF1260.tsv -o /kb/module/work/tmp');

    my $returnVar = {
        model_id => 'testmodelid'
    };



    return $returnVar;
    #END runpicaxe
    my @_bad_returns;
    (ref($return) eq 'HASH') or push(@_bad_returns, "Invalid type for return variable \"return\" (value was \"$return\")");
    if (@_bad_returns) {
	my $msg = "Invalid returns passed to runpicaxe:\n" . join("", map { "\t$_\n" } @_bad_returns);
	Bio::KBase::Exceptions::ArgumentValidationError->throw(error => $msg,
							       method_name => 'runpicaxe');
    }
    return($return);
}




=head2 status

  $return = $obj->status()

=over 4

=item Parameter and return types

=begin html

<pre>
$return is a string
</pre>

=end html

=begin text

$return is a string

=end text

=item Description

Return the module status. This is a structure including Semantic Versioning number, state and git info.

=back

=cut

sub status {
    my($return);
    #BEGIN_STATUS
    $return = {"state" => "OK", "message" => "", "version" => $VERSION,
               "git_url" => $GIT_URL, "git_commit_hash" => $GIT_COMMIT_HASH};
    #END_STATUS
    return($return);
}

=head1 TYPES



=head2 model_id

=over 4



=item Description

A string representing a model id.


=item Definition

=begin html

<pre>
a string
</pre>

=end html

=begin text

a string

=end text

=back



=head2 workspace_name

=over 4



=item Description

A string representing a workspace name.


=item Definition

=begin html

<pre>
a string
</pre>

=end html

=begin text

a string

=end text

=back



=head2 EachCompound

=over 4



=item Definition

=begin html

<pre>
a reference to a hash where the following keys are defined:
compound_id has a value which is a string
compound_name has a value which is a string

</pre>

=end html

=begin text

a reference to a hash where the following keys are defined:
compound_id has a value which is a string
compound_name has a value which is a string


=end text

=back



=head2 RunPicAxe

=over 4



=item Definition

=begin html

<pre>
a reference to a hash where the following keys are defined:
workspace has a value which is a kb_picaxe.workspace_name
model_id has a value which is a kb_picaxe.model_id
compounds has a value which is a reference to a list where each element is a kb_picaxe.EachCompound

</pre>

=end html

=begin text

a reference to a hash where the following keys are defined:
workspace has a value which is a kb_picaxe.workspace_name
model_id has a value which is a kb_picaxe.model_id
compounds has a value which is a reference to a list where each element is a kb_picaxe.EachCompound


=end text

=back



=head2 PicAxeResults

=over 4



=item Definition

=begin html

<pre>
a reference to a hash where the following keys are defined:
model_id has a value which is a kb_picaxe.model_id

</pre>

=end html

=begin text

a reference to a hash where the following keys are defined:
model_id has a value which is a kb_picaxe.model_id


=end text

=back



=cut

1;
